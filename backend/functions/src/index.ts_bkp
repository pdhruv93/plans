import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import { createUser } from './createUser';

admin.initializeApp();

// create user in the users collection whenever a new user signs in
export const createUserOnLogin = functions.auth.user().onCreate((user) => createUser(user));

// get users from DB
export const getUsers = functions.https.onCall(() => {
  return admin
    .firestore()
    .collection('users')
    .get()
    .then((snapshot) => snapshot.docs.map((doc) => doc.data()));
});

// create a plan in DB
export const createPlan = functions.https.onCall((data, context) => {
  return admin
    .firestore()
    .collection('plans')
    .add({ ...data, creator: context.auth?.uid, attendees: [context.auth?.uid] })
    .then((docRef) => ({
      planId: docRef.id,
      ...data,
      creator: context.auth?.uid,
      attendees: [context.auth?.uid],
    }));
});

// delete a plan from DB
export const deletePlan = functions.https.onCall((data) => {
  return admin.firestore().collection('plans').doc(data.planId).delete();
});

// get single plan
export const getPlan = functions.https.onCall((data) => {
  return admin
    .firestore()
    .collection('plans')
    .doc(data.planId)
    .get()
    .then((snapshot) => ({
      planId: snapshot.id,
      ...snapshot.data(),
    }));
});

// get plans from DB
export const getPlans = functions.https.onCall((_, context) => {
  if (context.auth) {
    // user is logged in, return: all plans
    return admin
      .firestore()
      .collection('plans')
      .get()
      .then((snapshot) =>
        snapshot.docs.map((doc) => ({
          planId: doc.id,
          ...doc.data(),
        })),
      );
  } else {
    // user is not logged in, return only public plans
    return admin
      .firestore()
      .collection('plans')
      .where('isPrivate', '==', false)
      .get()
      .then((snapshot) =>
        snapshot.docs.map((doc) => ({
          planId: doc.id,
          ...doc.data(),
        })),
      );
  }
});

// toggle attendee for particular plan and user
export const toggleAttendees = functions.https.onCall(async (data, context) => {
  const userId: string | undefined = context.auth?.uid;
  const planId: string = data.planId;
  const operation: 'add' | 'remove' = data.operation;

  await admin
    .firestore()
    .collection('plans')
    .doc(planId)
    .update({
      attendees:
        operation === 'remove'
          ? admin.firestore.FieldValue.arrayRemove(userId)
          : admin.firestore.FieldValue.arrayUnion(userId),
    });

  return admin
    .firestore()
    .collection('plans')
    .doc(planId)
    .get()
    .then((snapshot) => ({
      planId: snapshot.id,
      ...snapshot.data(),
    }));
});


export const sendN = functions.https.onCall(() => {
  const message: MulticastMessage = {
    notification: {
      title: 'Helloooooosss',
      body: 'New',
    },
    webpush: {
      fcmOptions: {
        link: '7TcgMlzqWYX0HPdQ2kZo',
      },
    },
    tokens: [
      'f3iESeq3x2_ok1XjN62dNH:APA91bFtl7DSJJMqPL0Tc4ZH5CMPrVi2D1CdOjJ35fwoAhzmfQiNlA_XlUUZMGouAAxoxdHOs-p37poNejv9S8pY-cQ0wOhSReshuiQJlU5bdZqorKc2kn8vyq7HhZy7OlwsAG-DMElK',
    ],
  };
  admin
    .messaging()
    .sendMulticast(message)
    .then((res) => {
      console.log(':::Sent');
      console.log(res);
    });

  console.log('::::Done');

  return null;
});
